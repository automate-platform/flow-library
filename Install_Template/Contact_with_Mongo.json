[
    {
        "id": "c5e3d2bbac78be49",
        "type": "tab",
        "label": "[PAP] Get List App",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7d708d595b6a64b",
        "type": "comment",
        "z": "c5e3d2bbac78be49",
        "name": "Get application from mongodb",
        "info": "",
        "x": 140,
        "y": 200,
        "wires": []
    },
    {
        "id": "7ded172498a0513d",
        "type": "mongodb4",
        "z": "c5e3d2bbac78be49",
        "clientNode": "0a9f23fd1fc93a63",
        "mode": "collection",
        "collection": "flows",
        "operation": "findOne",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "Mongodb",
        "x": 520,
        "y": 260,
        "wires": [
            [
                "b6ea5eb78226c689"
            ]
        ]
    },
    {
        "id": "e9cb5975936d58f7",
        "type": "http in",
        "z": "c5e3d2bbac78be49",
        "name": "Get App By Id",
        "url": "/app/:id",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "5f6f5677a0ea67f5"
            ]
        ]
    },
    {
        "id": "9c74f645243a87ed",
        "type": "inject",
        "z": "c5e3d2bbac78be49",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "5f6f5677a0ea67f5"
            ]
        ]
    },
    {
        "id": "5f6f5677a0ea67f5",
        "type": "function",
        "z": "c5e3d2bbac78be49",
        "name": "Create array store db",
        "func": "let options = {\n    projection: { _id: 1, description: 1, icon_flow: 1, summary: 1, type: 1, gitOwners: 1, readme: 1, flow: 1, tags: 1, updated_at: 1, created_at: 1}\n};\nlet query = {\n    // type: 'app',\n    _id: msg.req.params.id\n};\nmsg.payload = [query, options];\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 260,
        "wires": [
            [
                "7ded172498a0513d"
            ]
        ]
    },
    {
        "id": "3f46e79564be2704",
        "type": "http response",
        "z": "c5e3d2bbac78be49",
        "name": "response",
        "statusCode": "200",
        "headers": {},
        "x": 840,
        "y": 280,
        "wires": []
    },
    {
        "id": "bd50333e76b2f9ef",
        "type": "debug",
        "z": "c5e3d2bbac78be49",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 240,
        "wires": []
    },
    {
        "id": "8b02a1308cdcd146",
        "type": "comment",
        "z": "c5e3d2bbac78be49",
        "name": "Get all application from mongodb",
        "info": "",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "cdb905c160d12333",
        "type": "mongodb4",
        "z": "c5e3d2bbac78be49",
        "clientNode": "0a9f23fd1fc93a63",
        "mode": "collection",
        "collection": "flows",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "Mongodb",
        "x": 500,
        "y": 120,
        "wires": [
            [
                "2f8ff1bbd3e25c9c",
                "71d40826b3e73848"
            ]
        ]
    },
    {
        "id": "70e71c1bedc62cc6",
        "type": "http in",
        "z": "c5e3d2bbac78be49",
        "name": "Get List Apps",
        "url": "/app",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "a2069f53607e12f7"
            ]
        ]
    },
    {
        "id": "5cfdab407fa5bf0d",
        "type": "inject",
        "z": "c5e3d2bbac78be49",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "a2069f53607e12f7"
            ]
        ]
    },
    {
        "id": "a2069f53607e12f7",
        "type": "function",
        "z": "c5e3d2bbac78be49",
        "name": "Create array store db",
        "func": "let options = {\n    projection: { _id: 1, description: 1, icon_flow: 1, summary: 1, type: 1, tags: 1, updated_at: 1, created_at:1}\n};\nlet query = {\n    type : 'app'\n};\nmsg.payload = [query, options];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 120,
        "wires": [
            [
                "cdb905c160d12333"
            ]
        ]
    },
    {
        "id": "11c52f9ac543ef5b",
        "type": "http response",
        "z": "c5e3d2bbac78be49",
        "name": "response",
        "statusCode": "200",
        "headers": {},
        "x": 820,
        "y": 140,
        "wires": []
    },
    {
        "id": "8c5c64d27436e68e",
        "type": "debug",
        "z": "c5e3d2bbac78be49",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 100,
        "wires": []
    },
    {
        "id": "f454e22156f0e776",
        "type": "comment",
        "z": "c5e3d2bbac78be49",
        "name": "Find App by Contain Desc",
        "info": "",
        "x": 130,
        "y": 340,
        "wires": []
    },
    {
        "id": "faf67fc9bb7e31f6",
        "type": "mongodb4",
        "z": "c5e3d2bbac78be49",
        "clientNode": "0a9f23fd1fc93a63",
        "mode": "collection",
        "collection": "flows",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "Mongodb",
        "x": 520,
        "y": 400,
        "wires": [
            [
                "54d9a3dc0bd9a994"
            ]
        ]
    },
    {
        "id": "f1117854ffd1e4bd",
        "type": "http in",
        "z": "c5e3d2bbac78be49",
        "name": "Get App By Desc",
        "url": "app/search/:desc",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "37e9a640b3df50fb"
            ]
        ]
    },
    {
        "id": "58455fe47eba860e",
        "type": "inject",
        "z": "c5e3d2bbac78be49",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "37e9a640b3df50fb"
            ]
        ]
    },
    {
        "id": "37e9a640b3df50fb",
        "type": "function",
        "z": "c5e3d2bbac78be49",
        "name": "Create array store db",
        "func": "let options = {\n    projection: { _id: 1, description: 1, icon_flow: 1, summary: 1, type: 1, gitOwners: 1, readme: 1, flow: 1, tags: 1, updated_at: 1, created_at: 1}\n};\n\nlet query = {\n    type: 'app',\n    description: { $regex: msg.req.params.desc, $options: \"i\" }\n};\n\nmsg.payload = [query, options];\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 400,
        "wires": [
            [
                "faf67fc9bb7e31f6"
            ]
        ]
    },
    {
        "id": "83153cae31cbd6d8",
        "type": "http response",
        "z": "c5e3d2bbac78be49",
        "name": "response",
        "statusCode": "200",
        "headers": {},
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "96a741ac781bba72",
        "type": "debug",
        "z": "c5e3d2bbac78be49",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 380,
        "wires": []
    },
    {
        "id": "2f8ff1bbd3e25c9c",
        "type": "function",
        "z": "c5e3d2bbac78be49",
        "name": "function 27",
        "func": "function formatDate(dateBefore) {\n    const dateObj = new Date(dateBefore);\n    const time = dateObj.toLocaleTimeString('en-US', { hour12: false });\n    const date = dateObj.toLocaleDateString('en-US', { day: 'numeric', month: 'numeric', year: 'numeric' });\n\n    const formattedCreateDate = `${time} ${date}`;\n    return formattedCreateDate;\n}\n\nif (msg.payload !== null) {\n    let appObjs = msg.payload\n    appObjs.forEach(function (element) {\n        let createDate = element.created_at\n        let updateDate = element.updated_at\n        element.created_at = formatDate(createDate);\n        element.updated_at = formatDate(updateDate);\n    });\n    msg.payload = appObjs\n    return msg;\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 120,
        "wires": [
            [
                "8c5c64d27436e68e",
                "11c52f9ac543ef5b"
            ]
        ]
    },
    {
        "id": "b6ea5eb78226c689",
        "type": "function",
        "z": "c5e3d2bbac78be49",
        "name": "function 28",
        "func": "function formatDate(dateBefore) {\n    const dateObj = new Date(dateBefore);\n    const time = dateObj.toLocaleTimeString('en-US', { hour12: false });\n    const date = dateObj.toLocaleDateString('en-US', { day: 'numeric', month: 'numeric', year: 'numeric' });\n\n    const formattedCreateDate = `${time} ${date}`;\n    return formattedCreateDate;\n}\n\nif (msg.payload !== null) {\n    let appObjs = msg.payload\n    let createDate = appObjs.created_at\n    let updateDate = appObjs.updated_at\n    appObjs.created_at = formatDate(createDate);\n    appObjs.updated_at = formatDate(updateDate);\n    msg.payload = appObjs\n    return msg;\n} else {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            [
                "3f46e79564be2704",
                "bd50333e76b2f9ef"
            ]
        ]
    },
    {
        "id": "54d9a3dc0bd9a994",
        "type": "function",
        "z": "c5e3d2bbac78be49",
        "name": "function 29",
        "func": "function formatDate(dateBefore) {\n    const dateObj = new Date(dateBefore);\n    const time = dateObj.toLocaleTimeString('en-US', { hour12: false });\n    const date = dateObj.toLocaleDateString('en-US', { day: 'numeric', month: 'numeric', year: 'numeric' });\n\n    const formattedCreateDate = `${time} ${date}`;\n    return formattedCreateDate;\n}\n\nif (msg.payload !== null) {\n    let appObjs = msg.payload\n    appObjs.forEach(function (element) {\n        let createDate = element.created_at\n        let updateDate = element.updated_at\n        element.created_at = formatDate(createDate);\n        element.updated_at = formatDate(updateDate);\n    });\n    msg.payload = appObjs\n    return msg;\n} else {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 400,
        "wires": [
            [
                "96a741ac781bba72",
                "83153cae31cbd6d8"
            ]
        ]
    },
    {
        "id": "098226f9f81644f0",
        "type": "http in",
        "z": "c5e3d2bbac78be49",
        "name": "Get List Install Apps",
        "url": "/installed",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "09520583ebec5fd9"
            ]
        ]
    },
    {
        "id": "5b2e47d48b836d61",
        "type": "inject",
        "z": "c5e3d2bbac78be49",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "09520583ebec5fd9"
            ]
        ]
    },
    {
        "id": "1b54e3c93e10251c",
        "type": "comment",
        "z": "c5e3d2bbac78be49",
        "name": "Get All Apps Already Installed",
        "info": "",
        "x": 140,
        "y": 480,
        "wires": []
    },
    {
        "id": "b4fd827f2fe1aef7",
        "type": "debug",
        "z": "c5e3d2bbac78be49",
        "name": "debug 77",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 520,
        "wires": []
    },
    {
        "id": "09520583ebec5fd9",
        "type": "file in",
        "z": "c5e3d2bbac78be49",
        "name": "List Apps Installed",
        "filename": "C:\\Users\\haiqd\\Test_Market\\menu.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 330,
        "y": 540,
        "wires": [
            [
                "3f70393fdfa398fe"
            ]
        ]
    },
    {
        "id": "3f70393fdfa398fe",
        "type": "json",
        "z": "c5e3d2bbac78be49",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 540,
        "wires": [
            [
                "b046aec6910d3b18"
            ]
        ]
    },
    {
        "id": "b046aec6910d3b18",
        "type": "function",
        "z": "c5e3d2bbac78be49",
        "name": "function 30",
        "func": "let listApps = msg.payload\nlet condition_query = [];\n\nlistApps.forEach(function(element) {\n    condition_query.push(element.app_id)\n});\nlet options = {\n    projection: { _id: 1, description: 1, icon_flow: 1, summary: 1, type: 1, tags: 1, updated_at: 1, created_at: 1, flow: 1 }\n};\nlet query = {\n    type: 'app',\n    _id: { $in: condition_query } \n};\nmsg.payload = [query, options];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 540,
        "wires": [
            [
                "4116818e42083f41"
            ]
        ]
    },
    {
        "id": "4116818e42083f41",
        "type": "mongodb4",
        "z": "c5e3d2bbac78be49",
        "clientNode": "0a9f23fd1fc93a63",
        "mode": "collection",
        "collection": "flows",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "Mongodb",
        "x": 780,
        "y": 540,
        "wires": [
            [
                "b4fd827f2fe1aef7",
                "f0d20a2cffe2fd58"
            ]
        ]
    },
    {
        "id": "f0d20a2cffe2fd58",
        "type": "http response",
        "z": "c5e3d2bbac78be49",
        "name": "response",
        "statusCode": "200",
        "headers": {},
        "x": 920,
        "y": 560,
        "wires": []
    },
    {
        "id": "71d40826b3e73848",
        "type": "debug",
        "z": "c5e3d2bbac78be49",
        "name": "debug 78",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "afafbabdbf6ab5b1",
        "type": "http in",
        "z": "c5e3d2bbac78be49",
        "name": "Get List Id Install Apps",
        "url": "/installed/flowid",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 660,
        "wires": [
            [
                "d8ac20ab83ef4c3b"
            ]
        ]
    },
    {
        "id": "2333d5df97ea18e8",
        "type": "inject",
        "z": "c5e3d2bbac78be49",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 700,
        "wires": [
            [
                "d8ac20ab83ef4c3b"
            ]
        ]
    },
    {
        "id": "24688a6520acb878",
        "type": "comment",
        "z": "c5e3d2bbac78be49",
        "name": "Get Id Flow Installed",
        "info": "",
        "x": 90,
        "y": 620,
        "wires": []
    },
    {
        "id": "151de74ce4c775c9",
        "type": "debug",
        "z": "c5e3d2bbac78be49",
        "name": "debug 81",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 660,
        "wires": []
    },
    {
        "id": "d8ac20ab83ef4c3b",
        "type": "file in",
        "z": "c5e3d2bbac78be49",
        "name": "List Apps Installed",
        "filename": "C:\\Users\\haiqd\\Test_Market\\menu.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 310,
        "y": 680,
        "wires": [
            [
                "14d2c0d01071b9ea"
            ]
        ]
    },
    {
        "id": "14d2c0d01071b9ea",
        "type": "json",
        "z": "c5e3d2bbac78be49",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 680,
        "wires": [
            [
                "151de74ce4c775c9",
                "3281e4d2d06b784b"
            ]
        ]
    },
    {
        "id": "3281e4d2d06b784b",
        "type": "http response",
        "z": "c5e3d2bbac78be49",
        "name": "response",
        "statusCode": "200",
        "headers": {},
        "x": 900,
        "y": 700,
        "wires": []
    },
    {
        "id": "0a9f23fd1fc93a63",
        "type": "mongodb4-client",
        "name": "Get Apps",
        "protocol": "mongodb",
        "hostname": "103.154.100.21",
        "port": "27017",
        "dbName": "flows",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "",
        "socketTimeoutMS": "",
        "minPoolSize": "",
        "maxPoolSize": "",
        "maxIdleTimeMS": "",
        "uri": "mongodb://user09:xkfxWZ2U@103.154.100.20/flows?authMechanism=SCRAM-SHA-1&authSource=admin",
        "advanced": "",
        "uriTabActive": "tab-uri-advanced"
    }
]